[{"/home/burslf/ITC/SKIN/SkinAI/src/index.js":"1","/home/burslf/ITC/SKIN/SkinAI/src/App.js":"2","/home/burslf/ITC/SKIN/SkinAI/src/reportWebVitals.js":"3","/home/burslf/ITC/SKIN/SkinAI/src/Contexts/Authentication.js":"4","/home/burslf/ITC/SKIN/SkinAI/src/Components/NavBar/Navbar.jsx":"5","/home/burslf/ITC/SKIN/SkinAI/src/Components/Slides/Slides.jsx":"6","/home/burslf/ITC/SKIN/SkinAI/src/Components/HomeImages/HomeImages.jsx":"7","/home/burslf/ITC/SKIN/SkinAI/src/Components/UploadForm/UploadForm.jsx":"8","/home/burslf/ITC/SKIN/SkinAI/src/Components/UserHistory/UserHistory.jsx":"9","/home/burslf/ITC/SKIN/SkinAI/src/Components/Prediction/Prediction.jsx":"10","/home/burslf/ITC/SKIN/SkinAI/src/Tools/WebsiteResponses.js":"11","/home/burslf/ITC/SKIN/SkinAI/src/Tools/URLs.js":"12","/home/burslf/ITC/SKIN/SkinAI/src/Components/ImageCrop/ImageCrop.js":"13","/home/burslf/ITC/SKIN/SkinAI/src/Components/Modals/LoginModal.jsx":"14","/home/burslf/ITC/SKIN/SkinAI/src/Components/Modals/SignupModal.jsx":"15","/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/mapsModal.jsx":"16","/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/MapContainer.jsx":"17","/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/GoogleMap.jsx":"18"},{"size":500,"mtime":1610985285359,"results":"19","hashOfConfig":"20"},{"size":1756,"mtime":1611173934039,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1610985285359,"results":"22","hashOfConfig":"20"},{"size":86,"mtime":1611047048619,"results":"23","hashOfConfig":"20"},{"size":3221,"mtime":1611234914110,"results":"24","hashOfConfig":"20"},{"size":1246,"mtime":1611173929634,"results":"25","hashOfConfig":"20"},{"size":665,"mtime":1611176376189,"results":"26","hashOfConfig":"20"},{"size":7363,"mtime":1611232503863,"results":"27","hashOfConfig":"20"},{"size":1822,"mtime":1611174715426,"results":"28","hashOfConfig":"20"},{"size":1315,"mtime":1611234090246,"results":"29","hashOfConfig":"20"},{"size":3508,"mtime":1611176376190,"results":"30","hashOfConfig":"20"},{"size":239,"mtime":1611144686015,"results":"31","hashOfConfig":"20"},{"size":2979,"mtime":1611180299273,"results":"32","hashOfConfig":"20"},{"size":2718,"mtime":1611144686004,"results":"33","hashOfConfig":"20"},{"size":3110,"mtime":1611144686004,"results":"34","hashOfConfig":"20"},{"size":1127,"mtime":1611226003125,"results":"35","hashOfConfig":"20"},{"size":2364,"mtime":1611226003124,"results":"36","hashOfConfig":"20"},{"size":1827,"mtime":1611173929634,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1k7rxoc",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},"/home/burslf/ITC/SKIN/SkinAI/src/index.js",[],["85","86"],"/home/burslf/ITC/SKIN/SkinAI/src/App.js",["87"],"import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Slides from \"./Components/Slides/Slides\";\nimport Navbar from \"./Components/NavBar/Navbar\";\nimport { useEffect, useState } from \"react\";\nimport { Authentication } from \"./Contexts/Authentication\";\nimport UploadForm from \"./Components/UploadForm/UploadForm\";\nimport \"./App.css\";\nimport Prediction from \"./Components/Prediction/Prediction\";\nimport HomeImages from \"./Components/HomeImages/HomeImages\";\nimport UserHistory from \"./Components/UserHistory/UserHistory\";\n\nexport const BASE_URL = process.env.REACT_APP_BASE_URL;\n\nfunction App() {\n  const [isLogged, setIsLogged] = useState(null);\n  const token = localStorage.getItem(\"token\");\n\n  useEffect(() => {\n    if (token) {\n      setIsLogged(true);\n    } else {\n      setIsLogged(false);\n    }\n  });\n\n  return (\n    <Authentication.Provider value={{ isLogged, setIsLogged }}>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route path=\"/upload\">\n            <UploadForm />\n          </Route>\n          <Route path=\"/Prediction\">\n            <Prediction />\n          </Route>\n          <Route path=\"/user/:id\">\n            <UserHistory />\n          </Route>\n          <Route path=\"/\">\n            <div className=\"my-container\">\n              <Slides />\n              {\n                <Link to=\"/upload\" className=\"open-upload-form\">\n                  <div>\n                    <div> Upload </div>\n                  </div>\n                </Link>\n              }\n              {/* <UploadForm /> */}\n              <HomeImages />\n            </div>\n          </Route>\n        </Switch>\n      </Router>\n    </Authentication.Provider>\n  );\n}\n\nexport default App;","/home/burslf/ITC/SKIN/SkinAI/src/reportWebVitals.js",[],"/home/burslf/ITC/SKIN/SkinAI/src/Contexts/Authentication.js",[],"/home/burslf/ITC/SKIN/SkinAI/src/Components/NavBar/Navbar.jsx",["88","89"],"import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faHome,\n  faPlus,\n  faSignInAlt,\n  faSignOutAlt,\n  faUserMd,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./Navbar.css\";\nimport { Link } from \"react-router-dom\";\nimport { useState, useContext, useEffect } from \"react\";\nimport LoginModal from \"../Modals/LoginModal\";\nimport SignupModal from \"../Modals/SignupModal\";\nimport { Authentication } from \"../../Contexts/Authentication\";\nimport { confirmLogout } from \"../../Tools/WebsiteResponses\";\nimport { Button } from \"react-bootstrap\";\n\nconst Navbar = (props) => {\n  const [isLoginOpen, setIsLoginOpen] = useState(false);\n  const [isSignupOpen, setIsSignupOpen] = useState(false);\n  const { isLogged, setIsLogged } = useContext(Authentication);\n\n  const sessionID = localStorage.getItem('sessionID');\n\n  const openLogin = () => {\n    setIsLoginOpen(true);\n  };\n  const closeLogin = () => {\n    setIsLoginOpen(false);\n  };\n  const closeSignup = () => {\n    setIsSignupOpen(false);\n  };\n  const handleLogout = () => {\n    confirmLogout(setIsLogged);\n  };\n\n  const modalStyle = {\n    overlay: {\n      backgroundColor: \"#2b1d13a0\",\n    },\n    content: {\n      borderRadius: \"13px\",\n      border: \"1px solid black\",\n      backgroundColor: \"whitesmoke\",\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      zIndex: 3,\n    },\n  };\n\n  return (\n    <div className=\"nav-container\">\n      <Link to=\"/\">\n        <button className=\"logo\"> SkinAI </button>\n      </Link>\n      <ul className=\"nav-links-container\">\n        <Link to=\"/\">\n          <li className=\"nav-links\">\n            <FontAwesomeIcon color=\"#36d68b\" icon={faHome} size=\"2x\" />\n          </li>\n        </Link>\n        <Link to=\"/upload\">\n          <li className=\"nav-links\">\n            <FontAwesomeIcon color=\"#36d68b\" icon={faPlus} size=\"2x\" />\n          </li>\n        </Link>\n        {!isLogged && (\n          <li className=\"nav-links\" onClick={openLogin}>\n            <Button className=\"login-btn\" variant=\"secondary\">\n              Login\n            </Button>\n          </li>\n        )}\n        {isLogged && (\n          <Link to={`/user/${sessionID}`}>\n            <li className=\"nav-links\">\n              <FontAwesomeIcon color=\"#36d68b\" icon={faUserMd} size=\"2x\" />\n            </li>\n          </Link>\n        )}\n        {isLogged && (\n          <li className=\"nav-links\">\n            <FontAwesomeIcon\n              color=\"#36d68b\"\n              onClick={handleLogout}\n              icon={faSignOutAlt}\n              size=\"2x\"\n            />\n          </li>\n        )}\n      </ul>\n      <LoginModal\n        setIsLoginOpen={setIsLoginOpen}\n        setIsSignupOpen={setIsSignupOpen}\n        isLoginOpen={isLoginOpen}\n        closeLogin={closeLogin}\n        modalStyle={modalStyle}\n      />\n      <SignupModal\n        setIsLoginOpen={setIsLoginOpen}\n        setIsSignupOpen={setIsSignupOpen}\n        isSignupOpen={isSignupOpen}\n        closeLogin={closeSignup}\n        modalStyle={modalStyle}\n      />\n    </div>\n  );\n};\n\nexport default Navbar;\n","/home/burslf/ITC/SKIN/SkinAI/src/Components/Slides/Slides.jsx",[],"/home/burslf/ITC/SKIN/SkinAI/src/Components/HomeImages/HomeImages.jsx",[],"/home/burslf/ITC/SKIN/SkinAI/src/Components/UploadForm/UploadForm.jsx",["90","91","92"],"import { faArrowLeft, faCamera,faToggleOn, faToggleOff } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport axios from 'axios';\nimport { useEffect, useRef, useState, useContext } from 'react'\nimport { Form, Button, Dropdown, Row } from 'react-bootstrap'\nimport { Spinner } from 'reactstrap';\nimport { useHistory } from \"react-router-dom\";\nimport './UploadForm.css'\nimport { Redirect } from 'react-router'\nimport { itemUploaded, formImageIssue, displayFormDoctorImage,redirecting } from '../../Tools/WebsiteResponses';\nimport ModalDoctorDisplay from './ModalDoctorDisplay.png';\nimport ImageCrop from '../ImageCrop/ImageCrop';\nimport { Authentication } from \"../../Contexts/Authentication\";\nimport url from '../../Tools/URLs';\n\n\nconst UploadForm = () => {\n    const [infos, setInfos] = useState({sendemail: false})\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const [pic, setPic] = useState({ selectedFile: null })\n    const [previewPic, setPreviewPic] = useState(\"\")\n    const [redirect, setRedirect] = useState(false) // in case of success\n    const [loading, setLoading] = useState(false);\n    const [croppedImage, setCroppedImage] = useState('bold');\n    const [sendEmail, setSendEmail] = useState(false)\n    const [nextForm, goToNextForm] = useState(false)\n    const {isLogged, setIsLogged} = useContext(Authentication) \n\n    const toggle = () => setDropdownOpen(prevState => !prevState);\n\n    const ref = useRef(null)\n    const history = useHistory();\n    const handleChange = (e) => {\n        setInfos({\n            ...infos,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const imageUploadStyle = {\n        color: \"#434343\",\n        fontSize: `${previewPic ? `15px` : `35px`}`,\n    }\n\n    const handleSelect = (e) => {\n        setInfos({ ...infos, category: e.target.name })\n    }\n\n    const uploadForm = (e) => {\n        setLoading(true);\n        e.preventDefault()\n        const data = new FormData()\n        for (let key in infos) {\n            data.append(key, infos[key])\n        }\n        if (pic.selectedFile) {\n            data.append('user', localStorage.getItem('sessionID'));\n            let img = pic.selectedFile;\n            if (croppedImage) {\n                img = croppedImage;\n            }\n            data.append('image', img);\n        }\n        redirecting();\n        axios.post(`${url}/upload-image`, data)\n            .then((res) => {\n                itemUploaded('Image Uploaded'); \n                setLoading(false)\n                history.push({\n                    pathname: '/Prediction',\n                    state: {data: res.data}\n                })\n            })\n            .catch(err => { formImageIssue(\"There was an issue uploading your image\"); setLoading(false)});\n    }\n\n    useEffect(() => {\n        displayFormDoctorImage(ModalDoctorDisplay);\n    }, [])\n\n    const imageUploader = (e) => {\n        const file = e.target.files[0]\n        const reader = new FileReader()\n        reader.onload = (e) => {\n            setPreviewPic(e.target.result)\n        }\n        reader.readAsDataURL(file)\n        setPic({ selectedFile: e.target.files[0] })\n        // setInfos({sendemail: false})\n    }\n\n    const goToPreviousForm = (image) => {\n        setCroppedImage(image)\n        goToNextForm(false)\n    }\n\n    if (redirect) {\n        return (\n            <Redirect to={url} />\n        )\n    }\n\n    return (\n        <div className='my-container'>\n            <div className='upload-container'>\n            <div className='instructions'>\n                        <h5 >1. Keep the spot in the absolute middle of the picture.</h5>\n                        <br />\n                        <h5>2. Make sure not to move too much so the quality is good.</h5>\n                        <br />\n                        <h5>3. Do not take a picture in a dark environment.</h5>\n                    </div>\n               <Form action=\"\" name=\"image\" className=\"upload-form\" onSubmit={e => uploadForm(e)} method=\"post\" enctype=\"multipart/form-data\">\n                    {!nextForm && \n                    <>\n                    <input type=\"file\" name=\"image\" ref={ref} id=\"hidden\" onChange={(e) => imageUploader(e)} />\n                    <div className=\"image-upload\" style={{width: `${previewPic ? `45px` : `90px`}`,height: `${previewPic ? `45px` : `90px`}`}}onClick={() => ref.current.click()}><FontAwesomeIcon style={imageUploadStyle} icon={faCamera} /></div>\n                   \n                       {previewPic && <div className=\"image-preview img-fluid\">\n                            <ImageCrop\n                                haveCropped={croppedImage && croppedImage}\n                                src={previewPic}\n                                setImage={setCroppedImage}\n                            />\n                        </div>}\n                        {pic.selectedFile && <Button onClick={() => goToNextForm(true)}> Next </Button>}                        \n                        </>}\n                        {nextForm && \n                        <>\n                        <div style={{position: 'relative', alignSelf: 'flex-start', marginLeft: '20px', cursor: 'pointer'}} onClick={() => goToPreviousForm()}> <FontAwesomeIcon icon={faArrowLeft} size=\"2x\"/> </div>\n                    <Form.Control className=\"upload-input\" type=\"number\" name=\"age\" min=\"0\" max=\"120\" placeholder=\"Age\" onChange={e => handleChange(e)} value={(infos && infos.age) && infos.age}/>\n                    <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n                        <Dropdown.Toggle caret>{(infos && infos.category) || 'Gender'}</Dropdown.Toggle>\n                        <Dropdown.Menu align='right'>\n                            <Dropdown.Item onClick={(e) => handleSelect(e)} name='Male'> Male </Dropdown.Item>\n                            <Dropdown.Item onClick={(e) => handleSelect(e)} name='Female'> Female </Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                    <div className=\"send-email\">\n                        <h5> Recieve the result by e-mail ?</h5>\n                        <div className=\"cstm-checkbox\">\n                            {!sendEmail && <FontAwesomeIcon icon={faToggleOff} size='2x' onClick={() => {\n                                setInfos({...infos, sendemail : true})\n                                setSendEmail(true)\n                                }} />}\n                            {sendEmail && <FontAwesomeIcon icon={faToggleOn} size='2x' onClick={() => {\n                                setInfos({...infos, sendemail : false})\n                                setSendEmail(false)\n                                }} />}\n                        </div>\n                        {(sendEmail && !isLogged) && <Form.Control className=\"email-input\" required={sendEmail} type=\"e mail\" name=\"email\" placeholder=\"Enter your e-mail\" onChange={e => handleChange(e)} value={(infos && infos.email) && infos.email}/>}\n                    </div>\n      \n                        {!loading ? <Button type=\"submit\"> Submit </Button> : <div className=\"mt-1\"><Spinner className=\"mt-4 mb-3\" color=\"secondary\" /></div>}\n                        </>}\n                        </Form>\n\n                   \n\n            </div>\n        </div>\n    )\n}\n\nexport default UploadForm","/home/burslf/ITC/SKIN/SkinAI/src/Components/UserHistory/UserHistory.jsx",["93"],"import React, { useEffect, useState } from 'react';\nimport './UserHistory.css';\nimport { Button } from 'reactstrap';\nimport axios from 'axios';\nimport { askForAllResultsDelete, askForOneResultDelete } from '../../Tools/WebsiteResponses';\nimport url from '../../Tools/URLs';\n\nconst UserHistory = () => {\n    const [userResults, setUserResults] = useState(null);\n    const config = { headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` } };\n\n    useEffect(() => {\n        axios.get(`${url}/results`, config)\n            .then(res => setUserResults(res.data))\n            .catch(err => console.log(\"Couldn't get user history from the database\"));\n    }, [])\n\n    return (\n        <div>\n            <h1 className=\"history-logo mb-5\">Your history</h1>\n            <Button color=\"danger\" className=\"mb-5 delete-all-button\" onClick={() => askForAllResultsDelete(url, config,setUserResults)}>Delete All Results</Button>\n            <div className=\"history-grid mb-5\">\n                {userResults && userResults.map((result) => {\n                    return (\n                        <div className=\"mb-5\">\n                            <div style={{ backgroundImage: `url(${result.imageURL})`, height: '250px' }} className=\"history-image rounded\"></div>\n                            <div className=\"flex-column mt-3 text-center\">\n                                <p style={{ fontSize: '20px' }}><span className=\"font-weight-bold\">Result:</span> {result.predictionResult}</p>\n                                <Button color=\"danger\" onClick={() => askForOneResultDelete(result.resultId, url,config,userResults,setUserResults)}>Delete</Button>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default UserHistory;","/home/burslf/ITC/SKIN/SkinAI/src/Components/Prediction/Prediction.jsx",["94","95","96","97","98","99","100","101","102","103"],"import {\n  Container,\n  Card,\n  Form,\n  Button,\n  Dropdown,\n  Row,\n  Col,\n} from \"react-bootstrap\";\nimport './Prediction.css';\nimport { useLocation } from \"react-router-dom\";\nimport MapsModal from \"../GoogleMap/mapsModal\";\nimport axios from \"axios\";\nimport {BASE_URL} from '../../App'\nimport { useEffect, useState } from \"react\";\n\nconst Prediction = (props) => {\n  const location = useLocation();\n  const [result, setResut] = useState(null)\n\n  useEffect(() => {\n    setResut(location.state.data)\n  }, [])\n\n  return (\n    <div className='my-container'>\n      <div className=\"result-container\">\n        <div className='prediction-container mb-5'>\n          <div style={{backgroundImage:`url(${result && result.image})`, minWidth:\"299px\", minHeight:\"250px\"}} className=\"rounded result-image ml-lg-5\" alt=\"Result Image\" />\n          <Card className='text-result'>\n            <h1>Result:</h1>\n            {result && result.result ? <h3> We highly recommened you to see a doctor </h3> :  <h3> Our diagnosis has concluded that a consultation is not necessary.</h3>}\n            <a href={`https://www.google.com/search?q=${'skin-cancer'}`} className=\"mt-3\" target=\"_blank\">Google Search for skin cancer</a>\n          </Card>\n        </div>\n        <MapsModal />\n      </div>\n    </div>\n  );\n};\n\nexport default Prediction;\n","/home/burslf/ITC/SKIN/SkinAI/src/Tools/WebsiteResponses.js",[],"/home/burslf/ITC/SKIN/SkinAI/src/Tools/URLs.js",[],"/home/burslf/ITC/SKIN/SkinAI/src/Components/ImageCrop/ImageCrop.js",["104"],"import React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass ImageCrop extends PureComponent {\n\n  constructor(props){\n    super(props);\n    this.state = {\n        src: null,\n        crop: {\n          unit: 'px',\n          width: 224,\n          height: 224,\n        },\n    };\n  }\n  \n\n  onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () =>\n        this.setState({ src: reader.result })\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  // If you setState the crop in here you should return false.\n  onImageLoaded = image => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = crop => {\n    this.makeClientCrop(crop);\n  };\n\n  onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    this.setState({ crop });\n  };\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.jpeg'\n      );\n      this.setState({ croppedImageUrl });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n        blob.name = fileName;\n        const jpegFile = new File([blob], fileName, { type: blob.type })\n        this.props.setImage(jpegFile);\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n  render() {\n    const { crop, croppedImageUrl, src } = this.state;\n\n    return (\n      <div>\n        {this.props.src && (\n          <ReactCrop\n          className='user-image'\n            src={this.props.src}\n            crop={crop}\n            ruleOfThirds\n            onImageLoaded={this.onImageLoaded}\n            onComplete={this.onCropComplete}\n            onChange={this.onCropChange}\n          />\n        )}\n        {this.props.haveCropped ? <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} /> : croppedImageUrl && (\n          <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ImageCrop;","/home/burslf/ITC/SKIN/SkinAI/src/Components/Modals/LoginModal.jsx",["105","106"],"import axios from 'axios'\nimport { useContext, useState } from 'react'\nimport {Form, Button} from 'react-bootstrap'\nimport {BASE_URL} from '../../App'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Authentication } from '../../Contexts/Authentication'\nimport Modal from 'react-modal';\nimport { signInSuccess } from '../../Tools/WebsiteResponses';\nimport url from '../../Tools/URLs';\n\nconst LoginModal = (props) => {\n    const [input, setInput] = useState(null) // Get input\n    const [error, setError] = useState(null) // Handle error from API\n\n    const {isLogged, setIsLogged} = useContext(Authentication) \n\n    const handleChange = (e) => {\n        setInput({...input, [e.target.name] : e.target.value})\n    }\n\n    const logIn = (e) => {\n        e.preventDefault()\n        axios.post(`${url}/login`, input)\n        .then(res => {\n            if (res.status === 200) {\n                signInSuccess()\n                setIsLogged(true);\n                localStorage.setItem('token', res.data.token)\n                localStorage.setItem('sessionID', res.data.user._id)\n            }\n            props.setIsLoginOpen(false)\n        })\n        .catch(err => {\n            if(err.response.status === 409) {\n                setError(err.response.data.message)\n            }\n        })\n    }\n\n    const errorStyle = {\n        color: '#d10000', \n        fontSize: '18px', \n        margin: '10px', \n        padding: '7px',\n        borderRadius: '9px',\n        backgroundColor: 'whitesmoke'\n    }\n\n    const goToSignup = () => {\n        props.setIsLoginOpen(false)\n        props.setIsSignupOpen(true)\n    }\n\n    return (\n        <Modal\n          isOpen={props.isLoginOpen}\n          onRequestClose={props.closeLogin}\n          style={props.modalStyle}\n          contentLabel=\"Example Modal\"\n          closeLogin={props.closeLogin}\n            >\n            <span onClick={() => props.setIsLoginOpen(false)} className='modal-close-btn'><FontAwesomeIcon icon={faTimes}/></span>\n            <h2 style={{textAlign: 'center', color: '#434343'}}>Login</h2>\n            <Form className ='login-form' onSubmit={logIn}>\n                <Form.Control type=\"email\" name=\"email\" placeholder=\"Email\" onChange={e=>handleChange(e)}/>\n                <Form.Control type=\"password\" name=\"password\" placeholder=\"Password\" onChange={e=>handleChange(e)}/>\n                <Button type='submit' className='login-btn'> Login </Button>\n                {error && <span style={errorStyle}> {error} </span>}\n            </Form>\n            <div className='go-to-signup' onClick={goToSignup}> New ? Sign Up ! </div>\n       </Modal>\n    )\n}\n\nexport default LoginModal","/home/burslf/ITC/SKIN/SkinAI/src/Components/Modals/SignupModal.jsx",["107"],"import Modal from 'react-modal';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport axios from 'axios'\nimport { useContext, useState } from 'react'\nimport {Form, Button} from 'react-bootstrap'\nimport { Authentication } from '../../Contexts/Authentication'\nimport { signUpSuccess } from '../../Tools/WebsiteResponses';\nimport url from '../../Tools/URLs';\n\nconst SignupModal = (props) => {\n    const [input, setInput] = useState(null)  // Get input\n    const [error, setError] = useState(null) // // Handle error from API\n\n    const {isLogged, setIsLogged} = useContext(Authentication)\n\n    const handleChange = (e) => {\n        setInput({...input, [e.target.name] : e.target.value})\n    }\n    const signUp = (e) => {\n        e.preventDefault()\n        axios.post(`${url}/signup`, input)\n        .then(res => {\n            if (res.status === 200) {\n                setIsLogged(true);\n                signUpSuccess();\n                localStorage.setItem('token', res.data.token)\n                localStorage.setItem('sessionID', res.data.user._id)\n            }\n        })\n        .catch(err => {\n            const error = err.response.data\n            // Define error message based on API\n            const errorType = error.message || error.firstName || error.lastName || error.phone \n            if(err.response.status === 409) {\n                setError(errorType)\n            }\n        })\n    }\n\n    const errorStyle = {\n        color: '#d10000', \n        fontSize: '18px', \n        marginTop: '10px', \n        padding: '7px',\n        borderRadius: '9px',\n        backgroundColor: 'whitesmoke'\n    }\n\n    const goToLogin = () => {\n        props.setIsSignupOpen(false)\n        props.setIsLoginOpen(true)\n    }\n\n    return (\n        <Modal\n        isOpen={props.isSignupOpen}\n        onRequestClose={props.closeSignup}\n        style={props.modalStyle}\n        contentLabel=\"Example Modal\"\n        closeLogin={props.closeSignup}\n          >\n        <span onClick={goToLogin} className='modal-close-btn'><FontAwesomeIcon icon={faArrowLeft}/></span>\n        <h2 style={{textAlign: 'center', color: '#434343'}}>Signup</h2>\n        <Form className ='login-form' onSubmit={signUp}>\n            <Form.Control type=\"email\" name=\"email\" placeholder=\"Email\" onChange={e=>handleChange(e)}/>\n            <Form.Control type=\"password\" name=\"password\" placeholder=\"Password\" onChange={e=>handleChange(e)}/>\n            <Form.Control type=\"password\" name=\"confirmPassword\" placeholder=\"Confirm password\" onChange={e=>handleChange(e)}/>\n            <Form.Control name=\"firstName\" placeholder=\"First name\" onChange={e=>handleChange(e)}/>\n            <Form.Control name=\"lastName\" placeholder=\"Last name\" onChange={e=>handleChange(e)}/>\n            <Form.Control name=\"phone\" placeholder=\"Phone number\" onChange={e=>handleChange(e)}/>\n            <Button type='submit' className=\"login-btn\"> Signup </Button>\n            {error && <span style={errorStyle}> {error} </span>}\n        </Form>\n        </Modal>\n    )\n}\n\nexport default SignupModal","/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/mapsModal.jsx",[],"/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/MapContainer.jsx",[],"/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/GoogleMap.jsx",["108","109","110"],"import React from \"react\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nconst GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_KEY;\nconst mapStyles = {\n  width: \"100%\",\n  height: \"100%\",\n};\n\nexport class MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n    };\n  }\n\n  fetchDoctors = (mapProps, map) => {\n    const { google } = mapProps;\n    const service = new google.maps.places.PlacesService(map);\n    const position = { lat: this.props.lat, lng: this.props.lng };\n    const request = {\n      location: position,\n      radius: 10000,\n      types: [\"hospital\", \"health\", \"doctor\", \"medical\", \"clinic\"],\n    };\n    service.nearbySearch(request, (results, status) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (let i = 0; i < results.length; i++) {\n          const infowindow = new google.maps.InfoWindow({\n            content: \n            `<p>${results[i].name}</p><p>${results[i].vicinity}</p>`\n          });\n          let marker = new google.maps.Marker({\n            position: results[i].geometry.location,\n            map: map,\n            title: results[i].name,\n            animation: google.maps.Animation.DROP\n          });\n          marker.addListener(\"click\", () => {\n            infowindow.open(map, marker);\n          });\n        }\n      }\n    });\n  };\n\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        onReady={this.fetchDoctors}\n        zoom={14}\n        style={mapStyles}\n        initialCenter={{\n          lat: this.props.lat,\n          lng: this.props.lng,\n        }}\n      />\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: GOOGLE_MAP_API_KEY,\n})(MapContainer);\n",["111","112"],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":19,"column":3,"nodeType":"119","endLine":19,"endColumn":12,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":5,"column":3,"nodeType":"119","messageId":"123","endLine":5,"endColumn":14},{"ruleId":"121","severity":1,"message":"124","line":11,"column":32,"nodeType":"119","messageId":"123","endLine":11,"endColumn":41},{"ruleId":"121","severity":1,"message":"125","line":5,"column":34,"nodeType":"119","messageId":"123","endLine":5,"endColumn":37},{"ruleId":"121","severity":1,"message":"126","line":22,"column":22,"nodeType":"119","messageId":"123","endLine":22,"endColumn":33},{"ruleId":"121","severity":1,"message":"127","line":27,"column":22,"nodeType":"119","messageId":"123","endLine":27,"endColumn":33},{"ruleId":"117","severity":1,"message":"128","line":16,"column":8,"nodeType":"129","endLine":16,"endColumn":10,"suggestions":"130"},{"ruleId":"121","severity":1,"message":"131","line":2,"column":3,"nodeType":"119","messageId":"123","endLine":2,"endColumn":12},{"ruleId":"121","severity":1,"message":"132","line":4,"column":3,"nodeType":"119","messageId":"123","endLine":4,"endColumn":7},{"ruleId":"121","severity":1,"message":"133","line":5,"column":3,"nodeType":"119","messageId":"123","endLine":5,"endColumn":9},{"ruleId":"121","severity":1,"message":"134","line":6,"column":3,"nodeType":"119","messageId":"123","endLine":6,"endColumn":11},{"ruleId":"121","severity":1,"message":"125","line":7,"column":3,"nodeType":"119","messageId":"123","endLine":7,"endColumn":6},{"ruleId":"121","severity":1,"message":"135","line":8,"column":3,"nodeType":"119","messageId":"123","endLine":8,"endColumn":6},{"ruleId":"121","severity":1,"message":"136","line":13,"column":8,"nodeType":"119","messageId":"123","endLine":13,"endColumn":13},{"ruleId":"121","severity":1,"message":"137","line":14,"column":9,"nodeType":"119","messageId":"123","endLine":14,"endColumn":17},{"ruleId":"117","severity":1,"message":"138","line":23,"column":6,"nodeType":"129","endLine":23,"endColumn":8,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":33,"column":13,"nodeType":"142","endLine":33,"endColumn":107},{"ruleId":"121","severity":1,"message":"143","line":94,"column":36,"nodeType":"119","messageId":"123","endLine":94,"endColumn":39},{"ruleId":"121","severity":1,"message":"137","line":4,"column":9,"nodeType":"119","messageId":"123","endLine":4,"endColumn":17},{"ruleId":"121","severity":1,"message":"144","line":16,"column":12,"nodeType":"119","messageId":"123","endLine":16,"endColumn":20},{"ruleId":"121","severity":1,"message":"144","line":15,"column":12,"nodeType":"119","messageId":"123","endLine":15,"endColumn":20},{"ruleId":"121","severity":1,"message":"145","line":2,"column":33,"nodeType":"119","messageId":"123","endLine":2,"endColumn":43},{"ruleId":"121","severity":1,"message":"146","line":2,"column":45,"nodeType":"119","messageId":"123","endLine":2,"endColumn":51},{"ruleId":"147","severity":1,"message":"148","line":29,"column":18,"nodeType":"149","messageId":"150","endLine":29,"endColumn":20},{"ruleId":"113","replacedBy":"151"},{"ruleId":"115","replacedBy":"152"},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setIsLogged'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [token] as a second argument to the useEffect Hook.","Identifier",["155"],"no-unused-vars","'faSignInAlt' is defined but never used.","unusedVar","'useEffect' is defined but never used.","'Row' is defined but never used.","'setRedirect' is assigned a value but never used.","'setIsLogged' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.","ArrayExpression",["156"],"'Container' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'Dropdown' is defined but never used.","'Col' is defined but never used.","'axios' is defined but never used.","'BASE_URL' is defined but never used.","React Hook useEffect has a missing dependency: 'location.state.data'. Either include it or remove the dependency array.",["157"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'src' is assigned a value but never used.","'isLogged' is assigned a value but never used.","'InfoWindow' is defined but never used.","'Marker' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["153"],["154"],"no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Add dependencies array: [token]",{"range":"164","text":"165"},"Update the dependencies array to be: [config]",{"range":"166","text":"167"},"Update the dependencies array to be: [location.state.data]",{"range":"168","text":"169"},[881,881],", [token]",[667,669],"[config]",[501,503],"[location.state.data]"]