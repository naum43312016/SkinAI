{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/burslf/ITC/SKIN/SkinAI/src/Components/ImageCrop/ImageCrop.js\";\nimport React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass ImageCrop extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n\n    this.state = {\n      src: null,\n      crop: {\n        unit: 'px',\n        width: 224,\n        height: 224\n      }\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = fileName;\n        const jpegFile = new File([blob], fileName, {\n          type: blob.type\n        });\n        this.props.setImage(jpegFile);\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n  render() {\n    const {\n      crop,\n      croppedImageUrl,\n      src\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.props.src && /*#__PURE__*/_jsxDEV(ReactCrop, {\n        src: this.props.src,\n        crop: crop,\n        ruleOfThirds: true,\n        onImageLoaded: this.onImageLoaded,\n        onComplete: this.onCropComplete,\n        onChange: this.onCropChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), this.props.haveCropped ? /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Crop\",\n        style: {\n          maxWidth: '100%'\n        },\n        src: this.props.haveCropped\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 35\n      }, this) : croppedImageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Crop\",\n        style: {\n          maxWidth: '100%'\n        },\n        src: croppedImageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ImageCrop;","map":{"version":3,"sources":["/home/burslf/ITC/SKIN/SkinAI/src/Components/ImageCrop/ImageCrop.js"],"names":["React","PureComponent","ReactCrop","ImageCrop","constructor","props","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","src","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","crop","makeClientCrop","onCropChange","percentCrop","state","unit","width","height","croppedImageUrl","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","jpegFile","File","type","setImage","window","URL","revokeObjectURL","fileUrl","createObjectURL","render","haveCropped","maxWidth"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass ImageCrop extends PureComponent {\n\n  constructor(props){\n    super(props);\n    this.state = {\n        src: null,\n        crop: {\n          unit: 'px',\n          width: 224,\n          height: 224,\n        },\n    };\n  }\n  \n\n  onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () =>\n        this.setState({ src: reader.result })\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  // If you setState the crop in here you should return false.\n  onImageLoaded = image => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = crop => {\n    this.makeClientCrop(crop);\n  };\n\n  onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    this.setState({ crop });\n  };\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.jpeg'\n      );\n      this.setState({ croppedImageUrl });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n        blob.name = fileName;\n        const jpegFile = new File([blob], fileName, { type: blob.type })\n        this.props.setImage(jpegFile);\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n  render() {\n    const { crop, croppedImageUrl, src } = this.state;\n\n    return (\n      <div>\n        {this.props.src && (\n          <ReactCrop\n            src={this.props.src}\n            crop={crop}\n            ruleOfThirds\n            onImageLoaded={this.onImageLoaded}\n            onComplete={this.onCropComplete}\n            onChange={this.onCropChange}\n          />\n        )}\n        {this.props.haveCropped ? <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={this.props.haveCropped} /> : croppedImageUrl && (\n          <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ImageCrop;"]},"metadata":{},"sourceType":"module"}