{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"/home/burslf/ITC/SKIN/SkinAI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/burslf/ITC/SKIN/SkinAI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/home/burslf/ITC/SKIN/SkinAI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/burslf/ITC/SKIN/SkinAI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/burslf/ITC/SKIN/SkinAI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/burslf/ITC/SKIN/SkinAI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{PureComponent}from'react';import ReactCrop from'react-image-crop';import'react-image-crop/dist/ReactCrop.css';var ImageCrop=/*#__PURE__*/function(_PureComponent){_inherits(ImageCrop,_PureComponent);var _super=_createSuper(ImageCrop);function ImageCrop(props){var _this;_classCallCheck(this,ImageCrop);_this=_super.call(this,props);_this.onSelectFile=function(e){if(e.target.files&&e.target.files.length>0){var reader=new FileReader();reader.addEventListener('load',function(){return _this.setState({src:reader.result});});reader.readAsDataURL(e.target.files[0]);}};_this.onImageLoaded=function(image){_this.imageRef=image;};_this.onCropComplete=function(crop){_this.makeClientCrop(crop);};_this.onCropChange=function(crop,percentCrop){// You could also use percentCrop:\n// this.setState({ crop: percentCrop });\n_this.setState({crop:crop});};_this.state={src:null,crop:{unit:'px',width:224,height:224}};return _this;}_createClass(ImageCrop,[{key:\"makeClientCrop\",value:function(){var _makeClientCrop=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(crop){var croppedImageUrl;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(this.imageRef&&crop.width&&crop.height)){_context.next=5;break;}_context.next=3;return this.getCroppedImg(this.imageRef,crop,'newFile.jpeg');case 3:croppedImageUrl=_context.sent;this.setState({croppedImageUrl:croppedImageUrl});case 5:case\"end\":return _context.stop();}}},_callee,this);}));function makeClientCrop(_x){return _makeClientCrop.apply(this,arguments);}return makeClientCrop;}()},{key:\"getCroppedImg\",value:function getCroppedImg(image,crop,fileName){var _this2=this;var canvas=document.createElement('canvas');var scaleX=image.naturalWidth/image.width;var scaleY=image.naturalHeight/image.height;canvas.width=crop.width;canvas.height=crop.height;var ctx=canvas.getContext('2d');ctx.drawImage(image,crop.x*scaleX,crop.y*scaleY,crop.width*scaleX,crop.height*scaleY,0,0,crop.width,crop.height);return new Promise(function(resolve,reject){canvas.toBlob(function(blob){if(!blob){//reject(new Error('Canvas is empty'));\nconsole.error('Canvas is empty');return;}blob.name=fileName;var jpegFile=new File([blob],fileName,{type:blob.type});_this2.props.setImage(jpegFile);window.URL.revokeObjectURL(_this2.fileUrl);_this2.fileUrl=window.URL.createObjectURL(blob);resolve(_this2.fileUrl);},'image/jpeg');});}},{key:\"render\",value:function render(){var _this$state=this.state,crop=_this$state.crop,croppedImageUrl=_this$state.croppedImageUrl,src=_this$state.src;return/*#__PURE__*/_jsxs(\"div\",{children:[this.props.src&&/*#__PURE__*/_jsx(ReactCrop,{src:this.props.src,crop:crop,ruleOfThirds:true,onImageLoaded:this.onImageLoaded,onComplete:this.onCropComplete,onChange:this.onCropChange}),this.props.haveCropped?/*#__PURE__*/_jsx(\"img\",{alt:\"Crop\",style:{maxWidth:'100%'},src:croppedImageUrl}):croppedImageUrl&&/*#__PURE__*/_jsx(\"img\",{alt:\"Crop\",style:{maxWidth:'100%'},src:croppedImageUrl})]});}}]);return ImageCrop;}(PureComponent);export default ImageCrop;","map":{"version":3,"sources":["/home/burslf/ITC/SKIN/SkinAI/src/Components/ImageCrop/ImageCrop.js"],"names":["React","PureComponent","ReactCrop","ImageCrop","props","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","src","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","crop","makeClientCrop","onCropChange","percentCrop","state","unit","width","height","getCroppedImg","croppedImageUrl","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","jpegFile","File","type","setImage","window","URL","revokeObjectURL","fileUrl","createObjectURL","haveCropped","maxWidth"],"mappings":"u7BAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,KAAqC,OAArC,CACA,MAAOC,CAAAA,SAAP,KAAsB,kBAAtB,CACA,MAAO,qCAAP,C,GAEMC,CAAAA,S,8GAEJ,mBAAYC,KAAZ,CAAkB,2CAChB,uBAAMA,KAAN,EADgB,MAalBC,YAbkB,CAaH,SAAAC,CAAC,CAAI,CAClB,GAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,EAAkBF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,MAAf,CAAwB,CAA9C,CAAiD,CAC/C,GAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,UAAJ,EAAf,CACAD,MAAM,CAACE,gBAAP,CAAwB,MAAxB,CAAgC,iBAC9B,OAAKC,QAAL,CAAc,CAAEC,GAAG,CAAEJ,MAAM,CAACK,MAAd,CAAd,CAD8B,EAAhC,EAGAL,MAAM,CAACM,aAAP,CAAqBV,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAArB,EACD,CACF,CArBiB,OAwBlBS,aAxBkB,CAwBF,SAAAC,KAAK,CAAI,CACvB,MAAKC,QAAL,CAAgBD,KAAhB,CACD,CA1BiB,OA4BlBE,cA5BkB,CA4BD,SAAAC,IAAI,CAAI,CACvB,MAAKC,cAAL,CAAoBD,IAApB,EACD,CA9BiB,OAgClBE,YAhCkB,CAgCH,SAACF,IAAD,CAAOG,WAAP,CAAuB,CACpC;AACA;AACA,MAAKX,QAAL,CAAc,CAAEQ,IAAI,CAAJA,IAAF,CAAd,EACD,CApCiB,CAEhB,MAAKI,KAAL,CAAa,CACTX,GAAG,CAAE,IADI,CAETO,IAAI,CAAE,CACJK,IAAI,CAAE,IADF,CAEJC,KAAK,CAAE,GAFH,CAGJC,MAAM,CAAE,GAHJ,CAFG,CAAb,CAFgB,aAUjB,C,4JA4BoBP,I,2IACf,KAAKF,QAAL,EAAiBE,IAAI,CAACM,KAAtB,EAA+BN,IAAI,CAACO,M,gDACR,MAAKC,aAAL,CAC5B,KAAKV,QADuB,CAE5BE,IAF4B,CAG5B,cAH4B,C,QAAxBS,e,eAKN,KAAKjB,QAAL,CAAc,CAAEiB,eAAe,CAAfA,eAAF,CAAd,E,qNAIUZ,K,CAAOG,I,CAAMU,Q,CAAU,iBACnC,GAAMC,CAAAA,MAAM,CAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf,CACA,GAAMC,CAAAA,MAAM,CAAGjB,KAAK,CAACkB,YAAN,CAAqBlB,KAAK,CAACS,KAA1C,CACA,GAAMU,CAAAA,MAAM,CAAGnB,KAAK,CAACoB,aAAN,CAAsBpB,KAAK,CAACU,MAA3C,CACAI,MAAM,CAACL,KAAP,CAAeN,IAAI,CAACM,KAApB,CACAK,MAAM,CAACJ,MAAP,CAAgBP,IAAI,CAACO,MAArB,CACA,GAAMW,CAAAA,GAAG,CAAGP,MAAM,CAACQ,UAAP,CAAkB,IAAlB,CAAZ,CAEAD,GAAG,CAACE,SAAJ,CACEvB,KADF,CAEEG,IAAI,CAACqB,CAAL,CAASP,MAFX,CAGEd,IAAI,CAACsB,CAAL,CAASN,MAHX,CAIEhB,IAAI,CAACM,KAAL,CAAaQ,MAJf,CAKEd,IAAI,CAACO,MAAL,CAAcS,MALhB,CAME,CANF,CAOE,CAPF,CAQEhB,IAAI,CAACM,KARP,CASEN,IAAI,CAACO,MATP,EAYA,MAAO,IAAIgB,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCd,MAAM,CAACe,MAAP,CAAc,SAAAC,IAAI,CAAI,CACpB,GAAI,CAACA,IAAL,CAAW,CACT;AACAC,OAAO,CAACC,KAAR,CAAc,iBAAd,EACA,OACD,CACDF,IAAI,CAACG,IAAL,CAAYpB,QAAZ,CACA,GAAMqB,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,IAAJ,CAAS,CAACL,IAAD,CAAT,CAAiBjB,QAAjB,CAA2B,CAAEuB,IAAI,CAAEN,IAAI,CAACM,IAAb,CAA3B,CAAjB,CACA,MAAI,CAAClD,KAAL,CAAWmD,QAAX,CAAoBH,QAApB,EACAI,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2B,MAAI,CAACC,OAAhC,EACA,MAAI,CAACA,OAAL,CAAeH,MAAM,CAACC,GAAP,CAAWG,eAAX,CAA2BZ,IAA3B,CAAf,CACAH,OAAO,CAAC,MAAI,CAACc,OAAN,CAAP,CACD,CAZD,CAYG,YAZH,EAaD,CAdM,CAAP,CAeD,C,uCAEQ,iBACgC,KAAKlC,KADrC,CACCJ,IADD,aACCA,IADD,CACOS,eADP,aACOA,eADP,CACwBhB,GADxB,aACwBA,GADxB,CAGP,mBACE,uBACG,KAAKV,KAAL,CAAWU,GAAX,eACC,KAAC,SAAD,EACE,GAAG,CAAE,KAAKV,KAAL,CAAWU,GADlB,CAEE,IAAI,CAAEO,IAFR,CAGE,YAAY,KAHd,CAIE,aAAa,CAAE,KAAKJ,aAJtB,CAKE,UAAU,CAAE,KAAKG,cALnB,CAME,QAAQ,CAAE,KAAKG,YANjB,EAFJ,CAWG,KAAKnB,KAAL,CAAWyD,WAAX,cAAyB,YAAK,GAAG,CAAC,MAAT,CAAgB,KAAK,CAAE,CAAEC,QAAQ,CAAE,MAAZ,CAAvB,CAA6C,GAAG,CAAEhC,eAAlD,EAAzB,CAAiGA,eAAe,eAC/G,YAAK,GAAG,CAAC,MAAT,CAAgB,KAAK,CAAE,CAAEgC,QAAQ,CAAE,MAAZ,CAAvB,CAA6C,GAAG,CAAEhC,eAAlD,EAZJ,GADF,CAiBD,C,uBA5GqB7B,a,EA+GxB,cAAeE,CAAAA,SAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nclass ImageCrop extends PureComponent {\n\n  constructor(props){\n    super(props);\n    this.state = {\n        src: null,\n        crop: {\n          unit: 'px',\n          width: 224,\n          height: 224,\n        },\n    };\n  }\n  \n\n  onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () =>\n        this.setState({ src: reader.result })\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  // If you setState the crop in here you should return false.\n  onImageLoaded = image => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = crop => {\n    this.makeClientCrop(crop);\n  };\n\n  onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    this.setState({ crop });\n  };\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.jpeg'\n      );\n      this.setState({ croppedImageUrl });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n        blob.name = fileName;\n        const jpegFile = new File([blob], fileName, { type: blob.type })\n        this.props.setImage(jpegFile);\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg');\n    });\n  }\n\n  render() {\n    const { crop, croppedImageUrl, src } = this.state;\n\n    return (\n      <div>\n        {this.props.src && (\n          <ReactCrop\n            src={this.props.src}\n            crop={crop}\n            ruleOfThirds\n            onImageLoaded={this.onImageLoaded}\n            onComplete={this.onCropComplete}\n            onChange={this.onCropChange}\n          />\n        )}\n        {this.props.haveCropped ? <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} /> : croppedImageUrl && (\n          <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ImageCrop;"]},"metadata":{},"sourceType":"module"}