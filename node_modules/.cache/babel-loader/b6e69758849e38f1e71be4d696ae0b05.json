{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/GoogleMap.jsx\";\nimport React from \"react\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nconst GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_KEY;\nconst mapStyles = {\n  width: \"100%\",\n  height: \"100%\"\n};\nexport class MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchDoctors = (mapProps, map) => {\n      const {\n        google\n      } = mapProps;\n      const service = new google.maps.places.PlacesService(map);\n      const position = {\n        lat: this.props.lat,\n        lng: this.props.lng\n      };\n      const request = {\n        location: position,\n        radius: 10000,\n        types: [\"hospital\", \"health\", \"doctor\", \"medical\", \"clinic\"]\n      };\n      service.nearbySearch(request, (results, status) => {\n        if (status == google.maps.places.PlacesServiceStatus.OK) {\n          for (let i = 0; i < results.length; i++) {\n            const infowindow = new google.maps.InfoWindow({\n              content: `<p>${results[i].name}</p><p>${results[i].vicinity}</p>`\n            });\n            let marker = new google.maps.Marker({\n              position: results[i].geometry.location,\n              map: map,\n              title: results[i].name,\n              animation: google.maps.Animation.DROP\n            });\n            marker.addListener(\"click\", () => {\n              infowindow.open(map, marker);\n            });\n          }\n        }\n      });\n    };\n\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {}\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Map, {\n      google: this.props.google,\n      onReady: this.fetchDoctors,\n      zoom: 14,\n      style: mapStyles,\n      initialCenter: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: GOOGLE_MAP_API_KEY\n})(MapContainer);","map":{"version":3,"sources":["/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/GoogleMap.jsx"],"names":["React","Map","GoogleApiWrapper","InfoWindow","Marker","GOOGLE_MAP_API_KEY","process","env","REACT_APP_GOOGLE_MAP_KEY","mapStyles","width","height","MapContainer","Component","constructor","props","fetchDoctors","mapProps","map","google","service","maps","places","PlacesService","position","lat","lng","request","location","radius","types","nearbySearch","results","status","PlacesServiceStatus","OK","i","length","infowindow","content","name","vicinity","marker","geometry","title","animation","Animation","DROP","addListener","open","state","showingInfoWindow","activeMarker","selectedPlace","render","apiKey"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nconst GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_KEY;\nconst mapStyles = {\n  width: \"100%\",\n  height: \"100%\",\n};\n\nexport class MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n    };\n  }\n\n  fetchDoctors = (mapProps, map) => {\n    const { google } = mapProps;\n    const service = new google.maps.places.PlacesService(map);\n    const position = { lat: this.props.lat, lng: this.props.lng };\n    const request = {\n      location: position,\n      radius: 10000,\n      types: [\"hospital\", \"health\", \"doctor\", \"medical\", \"clinic\"],\n    };\n    service.nearbySearch(request, (results, status) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        for (let i = 0; i < results.length; i++) {\n          const infowindow = new google.maps.InfoWindow({\n            content: \n            `<p>${results[i].name}</p><p>${results[i].vicinity}</p>`\n          });\n          let marker = new google.maps.Marker({\n            position: results[i].geometry.location,\n            map: map,\n            title: results[i].name,\n            animation: google.maps.Animation.DROP\n          });\n          marker.addListener(\"click\", () => {\n            infowindow.open(map, marker);\n          });\n        }\n      }\n    });\n  };\n\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        onReady={this.fetchDoctors}\n        zoom={14}\n        style={mapStyles}\n        initialCenter={{\n          lat: this.props.lat,\n          lng: this.props.lng,\n        }}\n      />\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: GOOGLE_MAP_API_KEY,\n})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}