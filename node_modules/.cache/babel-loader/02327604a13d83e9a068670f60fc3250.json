{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/GoogleMap.jsx\";\nimport React from \"react\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nconst GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_KEY;\nconst mapStyles = {\n  width: \"100%\",\n  height: \"100%\"\n};\nexport class MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchDoctors = (mapProps, map) => {\n      const {\n        google\n      } = mapProps;\n      const service = new google.maps.places.PlacesService(map);\n      const position = {\n        lat: this.props.lat,\n        lng: this.props.lng\n      };\n      const request = {\n        location: position,\n        radius: 10000,\n        types: [\"hospital\", \"health\", \"doctor\", \"medical\", \"clinic\"]\n      };\n      service.nearbySearch(request, (results, status) => {\n        if (status == google.maps.places.PlacesServiceStatus.OK) {\n          console.log(\"results= \" + results);\n\n          for (const [key, value] of Object.entries(results)) {\n            console.log(`${key}: ${value}`);\n          } //name\n\n\n          const image = \"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\";\n\n          for (let i = 0; i < results.length; i++) {\n            //this.addMarker(map,results[i].geometry.location,results[i].name)\n            new google.maps.Marker({\n              position: results[i].geometry.location,\n              map: map,\n              title: results[i].name,\n              animation: google.maps.Animation.DROP\n            });\n          }\n          /*console.log(\"results= \"+ results[0].geometry.location);\n                  for (const [key, value] of Object.entries(results[0].geometry)) {\n                      console.log(`${key}: ${value}`);\n                  }*/\n\n        }\n      });\n    };\n\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {}\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Map, {\n      google: this.props.google,\n      onReady: this.fetchDoctors,\n      zoom: 14,\n      style: mapStyles,\n      initialCenter: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: GOOGLE_MAP_API_KEY\n})(MapContainer);","map":{"version":3,"sources":["/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/GoogleMap.jsx"],"names":["React","Map","GoogleApiWrapper","InfoWindow","Marker","GOOGLE_MAP_API_KEY","process","env","REACT_APP_GOOGLE_MAP_KEY","mapStyles","width","height","MapContainer","Component","constructor","props","fetchDoctors","mapProps","map","google","service","maps","places","PlacesService","position","lat","lng","request","location","radius","types","nearbySearch","results","status","PlacesServiceStatus","OK","console","log","key","value","Object","entries","image","i","length","geometry","title","name","animation","Animation","DROP","state","showingInfoWindow","activeMarker","selectedPlace","render","apiKey"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nconst GOOGLE_MAP_API_KEY = process.env.REACT_APP_GOOGLE_MAP_KEY;\nconst mapStyles = {\n  width: \"100%\",\n  height: \"100%\",\n};\n\nexport class MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n    };\n  }\n\n  fetchDoctors = (mapProps, map) => {\n    const { google } = mapProps;\n    const service = new google.maps.places.PlacesService(map);\n    const position = { lat: this.props.lat, lng: this.props.lng };\n    const request = {\n      location: position,\n      radius: 10000,\n      types: [\"hospital\", \"health\", \"doctor\", \"medical\", \"clinic\"],\n    };\n    service.nearbySearch(request, (results, status) => {\n      if (status == google.maps.places.PlacesServiceStatus.OK) {\n        console.log(\"results= \" + results);\n        for (const [key, value] of Object.entries(results)) {\n          console.log(`${key}: ${value}`);\n        }\n        //name\n        const image =\n          \"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\";\n        for (let i = 0; i < results.length; i++) {\n          //this.addMarker(map,results[i].geometry.location,results[i].name)\n          new google.maps.Marker({\n            position: results[i].geometry.location,\n            map: map,\n            title: results[i].name,\n            animation: google.maps.Animation.DROP,\n          });\n        }\n        /*console.log(\"results= \"+ results[0].geometry.location);\n                for (const [key, value] of Object.entries(results[0].geometry)) {\n                    console.log(`${key}: ${value}`);\n                }*/\n      }\n    });\n  };\n\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        onReady={this.fetchDoctors}\n        zoom={14}\n        style={mapStyles}\n        initialCenter={{\n          lat: this.props.lat,\n          lng: this.props.lng,\n        }}\n      />\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: GOOGLE_MAP_API_KEY,\n})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}