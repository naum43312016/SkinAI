{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/burslf/ITC/SKIN/SkinAI/src/Components/UploadForm/UploadForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { faCamera } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport axios from 'axios';\nimport { useEffect, useRef, useState } from 'react';\nimport { Container, Form, Button, Dropdown, Row } from 'react-bootstrap';\nimport { Spinner } from 'reactstrap';\nimport { useHistory } from \"react-router-dom\";\nimport './UploadForm.css';\nimport { Redirect } from 'react-router';\nimport { itemUploaded, formImageIssue, displayFormDoctorImage, redirecting } from '../../Tools/WebsiteResponses';\nimport ModalDoctorDisplay from './ModalDoctorDisplay.png';\nimport ImageCrop from '../ImageCrop/ImageCrop';\nimport url from '../../Tools/URLs';\n\nconst UploadForm = () => {\n  _s();\n\n  const [infos, setInfos] = useState(null);\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [pic, setPic] = useState({\n    selectedFile: null\n  });\n  const [previewPic, setPreviewPic] = useState(\"\");\n  const [redirect, setRedirect] = useState(false); // in case of success\n\n  const [loading, setLoading] = useState(false);\n  const [croppedImage, setCroppedImage] = useState(null);\n\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n\n  const ref = useRef(null);\n  const history = useHistory();\n\n  const handleChange = e => {\n    setInfos({ ...infos,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const imageUploadStyle = {\n    color: \"#434343\",\n    fontSize: `${previewPic ? `15px` : `35px`}`\n  };\n\n  const handleSelect = e => {\n    setInfos({ ...infos,\n      category: e.target.name\n    });\n  };\n\n  const uploadForm = e => {\n    setLoading(true);\n    e.preventDefault();\n    const data = new FormData();\n\n    for (let key in infos) {\n      data.append(key, infos[key]);\n    }\n\n    if (pic.selectedFile) {\n      data.append('user', localStorage.getItem('sessionID'));\n      let img = pic.selectedFile;\n\n      if (croppedImage) {\n        img = croppedImage;\n      }\n\n      data.append('image', img);\n    }\n\n    redirecting();\n    axios.post(`${url}/upload-image`, data).then(res => {\n      itemUploaded('Image Uploaded');\n      setLoading(false);\n      history.push({\n        pathname: '/Prediction',\n        state: {\n          data: res.data\n        }\n      });\n    }).catch(err => {\n      formImageIssue(\"There was an issue uploading your image\");\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    displayFormDoctorImage(ModalDoctorDisplay);\n  }, []);\n\n  const imageUploader = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      //console.log(e.target.result)\n      setPreviewPic(e.target.result);\n    };\n\n    reader.readAsDataURL(file);\n    setPic({\n      selectedFile: e.target.files[0]\n    });\n  };\n\n  if (redirect) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"instructions\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"1. Keep the spot in the absolute middle of the picture.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"2. Make sure the quality of the picture is good enough.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"3. Do not take a picture in a dark environment.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        action: \"\",\n        name: \"image\",\n        className: \"upload-form\",\n        onSubmit: e => uploadForm(e),\n        method: \"post\",\n        enctype: \"multipart/form-data\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          ref: ref,\n          id: \"hidden\",\n          onChange: e => imageUploader(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-upload\",\n          style: {\n            width: `${previewPic ? `45px` : `90px`}`,\n            height: `${previewPic ? `45px` : `90px`}`\n          },\n          onClick: () => ref.current.click(),\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            style: imageUploadStyle,\n            icon: faCamera\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 179\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), previewPic && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-preview\",\n          children: /*#__PURE__*/_jsxDEV(ImageCrop, {\n            src: previewPic,\n            setImage: setCroppedImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), !loading ? /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \" Submit for results \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-1\",\n          children: /*#__PURE__*/_jsxDEV(Spinner, {\n            className: \"mt-4 mb-3\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 109\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 87\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UploadForm, \"fZpjpG7LOPbYzSIoTaFVEOnKznA=\", false, function () {\n  return [useHistory];\n});\n\n_c = UploadForm;\nexport default UploadForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadForm\");","map":{"version":3,"sources":["/home/burslf/ITC/SKIN/SkinAI/src/Components/UploadForm/UploadForm.jsx"],"names":["faCamera","FontAwesomeIcon","axios","useEffect","useRef","useState","Container","Form","Button","Dropdown","Row","Spinner","useHistory","Redirect","itemUploaded","formImageIssue","displayFormDoctorImage","redirecting","ModalDoctorDisplay","ImageCrop","url","UploadForm","infos","setInfos","dropdownOpen","setDropdownOpen","pic","setPic","selectedFile","previewPic","setPreviewPic","redirect","setRedirect","loading","setLoading","croppedImage","setCroppedImage","toggle","prevState","ref","history","handleChange","e","target","name","value","imageUploadStyle","color","fontSize","handleSelect","category","uploadForm","preventDefault","data","FormData","key","append","localStorage","getItem","img","post","then","res","push","pathname","state","catch","err","imageUploader","file","files","reader","FileReader","onload","result","readAsDataURL","width","height","current","click"],"mappings":"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","sourcesContent":["import { faCamera } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport axios from 'axios';\nimport { useEffect, useRef, useState } from 'react'\nimport { Container, Form, Button, Dropdown, Row } from 'react-bootstrap'\nimport { Spinner } from 'reactstrap';\nimport { useHistory } from \"react-router-dom\";\nimport './UploadForm.css'\nimport { Redirect } from 'react-router'\nimport { itemUploaded, formImageIssue, displayFormDoctorImage,redirecting } from '../../Tools/WebsiteResponses';\nimport ModalDoctorDisplay from './ModalDoctorDisplay.png';\nimport ImageCrop from '../ImageCrop/ImageCrop';\n\nimport url from '../../Tools/URLs';\n\n\nconst UploadForm = () => {\n    const [infos, setInfos] = useState(null)\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n    const [pic, setPic] = useState({ selectedFile: null })\n    const [previewPic, setPreviewPic] = useState(\"\")\n    const [redirect, setRedirect] = useState(false) // in case of success\n    const [loading, setLoading] = useState(false);\n    const [croppedImage, setCroppedImage] = useState(null);\n\n    const toggle = () => setDropdownOpen(prevState => !prevState);\n\n    const ref = useRef(null)\n    const history = useHistory();\n    const handleChange = (e) => {\n        setInfos({\n            ...infos,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const imageUploadStyle = {\n        color: \"#434343\",\n        fontSize: `${previewPic ? `15px` : `35px`}`,\n    }\n\n    const handleSelect = (e) => {\n        setInfos({ ...infos, category: e.target.name })\n    }\n\n    const uploadForm = (e) => {\n        setLoading(true);\n        e.preventDefault()\n        const data = new FormData()\n        for (let key in infos) {\n            data.append(key, infos[key])\n        }\n        if (pic.selectedFile) {\n            data.append('user', localStorage.getItem('sessionID'));\n            let img = pic.selectedFile;\n            if (croppedImage) {\n                img = croppedImage;\n            }\n            data.append('image', img);\n        }\n        redirecting();\n        axios.post(`${url}/upload-image`, data)\n            .then((res) => {\n                itemUploaded('Image Uploaded'); \n                setLoading(false)\n                history.push({\n                    pathname: '/Prediction',\n                    state: {data: res.data}\n                })\n            })\n            .catch(err => { formImageIssue(\"There was an issue uploading your image\"); setLoading(false)});\n    }\n\n    useEffect(() => {\n        displayFormDoctorImage(ModalDoctorDisplay);\n    }, [])\n\n    const imageUploader = (e) => {\n        const file = e.target.files[0]\n        const reader = new FileReader()\n        reader.onload = (e) => {\n            //console.log(e.target.result)\n            setPreviewPic(e.target.result)\n        }\n        reader.readAsDataURL(file)\n        setPic({ selectedFile: e.target.files[0] })\n    }\n\n    if (redirect) {\n        return (\n            <Redirect to={url} />\n        )\n    }\n    return (\n        <div className='my-container'>\n            <div className='upload-container'>\n            <div className='instructions'>\n                        <h5 >1. Keep the spot in the absolute middle of the picture.</h5>\n                        <br />\n                        <h5>2. Make sure the quality of the picture is good enough.</h5>\n                        <br />\n                        <h5>3. Do not take a picture in a dark environment.</h5>\n                    </div>\n                <Form action=\"\" name=\"image\" className=\"upload-form\" onSubmit={e => uploadForm(e)} method=\"post\" enctype=\"multipart/form-data\">\n                    <input type=\"file\" name=\"image\" ref={ref} id=\"hidden\" onChange={(e) => imageUploader(e)} />\n                    <div className=\"image-upload\" style={{width: `${previewPic ? `45px` : `90px`}`,height: `${previewPic ? `45px` : `90px`}`}}onClick={() => ref.current.click()}><FontAwesomeIcon style={imageUploadStyle} icon={faCamera} /></div>\n                    {previewPic &&\n                        <div className=\"image-preview\">\n                            <ImageCrop\n                                src={previewPic}\n                                setImage={setCroppedImage}\n                            />\n                        </div>}\n                   \n                    {!loading ? <Button type=\"submit\"> Submit for results </Button> : <div className=\"mt-1\"><Spinner className=\"mt-4 mb-3\" color=\"secondary\" /></div>\n                    }\n                </Form>\n            </div>\n        </div>\n    )\n}\n\nexport default UploadForm"]},"metadata":{},"sourceType":"module"}