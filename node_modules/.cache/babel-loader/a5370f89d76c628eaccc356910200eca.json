{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/MapContainer.jsx\";\nimport React from \"react\";\nimport Map from \"../GoogleMap/GoogleMap\";\nimport \"./Map.css\";\n\nclass MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getPosition = () => {\n      console.log(\"get position\");\n\n      if (navigator.geolocation) {\n        console.log(\"get position If\");\n        navigator.geolocation.getCurrentPosition(this.showPosition, this.posError); // Passing in a success callback and an error callback fn\n      } else {\n        console.log(\"get position else\");\n        alert(\"Sorry, Geolocation is not supported by this browser.\"); // Alert is browser does not support geolocation\n      }\n    };\n\n    this.posError = () => {\n      console.log(\"posError\");\n\n      if (navigator.permissions) {\n        navigator.permissions.query({\n          name: \"geolocation\"\n        }).then(res => {\n          if (res.state === \"denied\") {\n            alert(\"Enable location permissions for this website in your browser settings.\");\n          }\n        });\n      } else {\n        alert(\"Unable to access your location. You can continue by submitting location manually.\"); // Obtaining Lat/long from address necessary\n      }\n    };\n\n    this.showPosition = async position => {\n      console.log(\"showposition\");\n      let lat = position.coords.latitude; // You have obtained latitude coordinate!\n\n      let long = position.coords.longitude; // You have obtained longitude coordinate!\n\n      console.log(\"Lat= \" + lat);\n      console.log(\"long= \" + long); //getmarkers\n      //const doctors =\n\n      this.setState({\n        lat: lat,\n        lng: long,\n        position: true\n      }); //props.set_lat(lat) // Using dispatch to modify lat store state\n      //props.set_long(long) // Using dispatch to modify long store state\n      //convertToAddress(lat, long) // Will convert lat/long to City, State, & Zip code\n    };\n\n    this.state = {\n      position: false,\n      lat: \"\",\n      lng: \"\",\n      doctors: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.getPosition();\n    console.log(\"hello\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12\",\n      children: this.state.position && /*#__PURE__*/_jsxDEV(Map, {\n        lat: this.state.lat,\n        lng: this.state.lng\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MapContainer;","map":{"version":3,"sources":["/home/burslf/ITC/SKIN/SkinAI/src/Components/GoogleMap/MapContainer.jsx"],"names":["React","Map","MapContainer","Component","constructor","props","getPosition","console","log","navigator","geolocation","getCurrentPosition","showPosition","posError","alert","permissions","query","name","then","res","state","position","lat","coords","latitude","long","longitude","setState","lng","doctors","componentDidMount","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,wBAAhB;AACA,OAAO,WAAP;;AACA,MAAMC,YAAN,SAA2BF,KAAK,CAACG,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAanBC,WAbmB,GAaL,MAAM;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AACA,UAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBH,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAC,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACE,KAAKC,YADP,EAEE,KAAKC,QAFP,EAFyB,CAKtB;AACJ,OAND,MAMO;AACLN,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAM,QAAAA,KAAK,CAAC,sDAAD,CAAL,CAFK,CAE0D;AAChE;AACF,KAzBkB;;AAAA,SA2BnBD,QA3BmB,GA2BR,MAAM;AACfN,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,UAAIC,SAAS,CAACM,WAAd,EAA2B;AACzBN,QAAAA,SAAS,CAACM,WAAV,CAAsBC,KAAtB,CAA4B;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAA5B,EAAqDC,IAArD,CAA2DC,GAAD,IAAS;AACjE,cAAIA,GAAG,CAACC,KAAJ,KAAc,QAAlB,EAA4B;AAC1BN,YAAAA,KAAK,CACH,wEADG,CAAL;AAGD;AACF,SAND;AAOD,OARD,MAQO;AACLA,QAAAA,KAAK,CACH,mFADG,CAAL,CADK,CAGF;AACJ;AACF,KA1CkB;;AAAA,SA4CnBF,YA5CmB,GA4CJ,MAAOS,QAAP,IAAoB;AACjCd,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,UAAIc,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,QAA1B,CAFiC,CAEG;;AACpC,UAAIC,IAAI,GAAGJ,QAAQ,CAACE,MAAT,CAAgBG,SAA3B,CAHiC,CAGK;;AACtCnB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAUc,GAAtB;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAWiB,IAAvB,EALiC,CAMjC;AACA;;AACA,WAAKE,QAAL,CAAc;AAAEL,QAAAA,GAAG,EAAEA,GAAP;AAAYM,QAAAA,GAAG,EAAEH,IAAjB;AAAuBJ,QAAAA,QAAQ,EAAE;AAAjC,OAAd,EARiC,CASjC;AACA;AACA;AACD,KAxDkB;;AAEjB,SAAKD,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,KADC;AAEXC,MAAAA,GAAG,EAAE,EAFM;AAGXM,MAAAA,GAAG,EAAE,EAHM;AAIXC,MAAAA,OAAO,EAAE;AAJE,KAAb;AAMD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKxB,WAAL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;;AA6CDuB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBACG,KAAKX,KAAL,CAAWC,QAAX,iBACC,QAAC,GAAD;AAAK,QAAA,GAAG,EAAE,KAAKD,KAAL,CAAWE,GAArB;AAA0B,QAAA,GAAG,EAAE,KAAKF,KAAL,CAAWQ;AAA1C;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAlEwC;;AAoE3C,eAAe1B,YAAf","sourcesContent":["import React from \"react\";\nimport Map from \"../GoogleMap/GoogleMap\";\nimport \"./Map.css\";\nclass MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      position: false,\n      lat: \"\",\n      lng: \"\",\n      doctors: \"\",\n    };\n  }\n  componentDidMount() {\n    this.getPosition();\n    console.log(\"hello\");\n  }\n  getPosition = () => {\n    console.log(\"get position\");\n    if (navigator.geolocation) {\n      console.log(\"get position If\");\n      navigator.geolocation.getCurrentPosition(\n        this.showPosition,\n        this.posError\n      ); // Passing in a success callback and an error callback fn\n    } else {\n      console.log(\"get position else\");\n      alert(\"Sorry, Geolocation is not supported by this browser.\"); // Alert is browser does not support geolocation\n    }\n  };\n  // Geolocation error callback fn. Query permissions to check if the error occured due to user not allowing location to be shared\n  posError = () => {\n    console.log(\"posError\");\n    if (navigator.permissions) {\n      navigator.permissions.query({ name: \"geolocation\" }).then((res) => {\n        if (res.state === \"denied\") {\n          alert(\n            \"Enable location permissions for this website in your browser settings.\"\n          );\n        }\n      });\n    } else {\n      alert(\n        \"Unable to access your location. You can continue by submitting location manually.\"\n      ); // Obtaining Lat/long from address necessary\n    }\n  };\n  // Geolocation success callback fn\n  showPosition = async (position) => {\n    console.log(\"showposition\");\n    let lat = position.coords.latitude; // You have obtained latitude coordinate!\n    let long = position.coords.longitude; // You have obtained longitude coordinate!\n    console.log(\"Lat= \" + lat);\n    console.log(\"long= \" + long);\n    //getmarkers\n    //const doctors =\n    this.setState({ lat: lat, lng: long, position: true });\n    //props.set_lat(lat) // Using dispatch to modify lat store state\n    //props.set_long(long) // Using dispatch to modify long store state\n    //convertToAddress(lat, long) // Will convert lat/long to City, State, & Zip code\n  };\n  render() {\n    return (\n      <div className=\"col-12\">\n        {this.state.position && (\n          <Map lat={this.state.lat} lng={this.state.lng} />\n        )}\n      </div>\n    );\n  }\n}\nexport default MapContainer;\n"]},"metadata":{},"sourceType":"module"}